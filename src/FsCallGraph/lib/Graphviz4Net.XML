<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Graphviz4Net</name>
    </assembly>
    <members>
        <member name="P:Graphviz4Net.Graphs.IEdge.DestinationArrow">
            <summary>
            If the arrow is null, then the edge does not have a destination arrow.
            </summary>
        </member>
        <member name="P:Graphviz4Net.Graphs.IEdge.SourceArrow">
            <summary>
            If the arrow is null, then the edge does not have a source arrow.
            </summary>
        </member>
        <member name="M:Graphviz4Net.Dot.IGraphToDotConverter.Convert(System.IO.TextWriter,Graphviz4Net.Graphs.IGraph,Graphviz4Net.Dot.IAttributesProvider)">
            <summary>
            Converts given graph into the dot language.
            </summary>
            <returns>During the conversion each graph element is assigned an id. Map of these ids is returned as an array.
            Index is vertex id and value is the vertex instance with given id.</returns>
        </member>
        <member name="M:Graphviz4Net.Dot.GraphToDotConverter.Convert(System.IO.TextWriter,Graphviz4Net.Graphs.IGraph,Graphviz4Net.Dot.IAttributesProvider)">
            <summary>
            Converts given graph into the dot language.
            </summary>
            <returns>During the conversion each node is assigned an id. Map of these ids is returned.</returns>
        </member>
        <member name="M:Graphviz4Net.IDotRunner.RunDot(System.Action{System.IO.TextWriter})">
            <summary>
            Takes an action which should write the input into the DOT input stream and 
            returns a reader from which the output of the DOT can be read.
            </summary>
            <param name="writeGraph">An action which writers the input form the DOT into the given stream.</param>
            <returns>A reader to read the output of the DOT.</returns>
        </member>
        <member name="P:Graphviz4Net.DotExeRunner.DotExecutablePath">
            <summary>
            Gets or sets the path to the GraphViz executable file (dot.exe).
            </summary>
        </member>
        <member name="P:Graphviz4Net.DotExeRunner.DotExecutable">
            <summary>
            Gets or sets the name of the executable file that should be used.
            </summary>
        </member>
        <member name="E:Graphviz4Net.Graphs.ISubGraph.Changed">
            <summary>
            This event should be fired when <see cref="P:Graphviz4Net.Graphs.ISubGraph.Vertices"/> collection is changed.
            </summary>
        </member>
        <member name="M:Graphviz4Net.Graphs.SubGraph`1.RemoveVertex(`0)">
            <summary>
            Removes a vertex from this graph. 
            </summary>
            <remarks>
            <para>
            This method is internal, because it does not remove edges and therefore it 
            can left the graph in undefined state when used not properly.
            </para>
            </remarks>
            <param name="vertex">Vertex to be removed.</param>
        </member>
        <member name="T:Graphviz4Net.Dot.AntlrParser.DotGraphBuilder`1">
            <summary>
            The implementor must initialize <see cref="P:Graphviz4Net.Dot.AntlrParser.DotGraphBuilder`1.DotGraph"/> in its constructor!
            </summary>
        </member>
        <member name="T:Graphviz4Net.Dot.AntlrParser.DotGrammarParser">
            <summary>
            Code behind file for generated parser class.
            </summary>
        </member>
        <member name="M:Graphviz4Net.Dot.AntlrParser.DotGrammarParser.Unquote(System.String)">
            <summary>
            This method is used inside the DotGrammar.g file.
            </summary>
        </member>
        <member name="E:Graphviz4Net.Graphs.IGraph.Changed">
            <summary>
            This event should be fired when <see cref="P:Graphviz4Net.Graphs.IGraph.Edges"/>, <see cref="P:Graphviz4Net.Graphs.IGraph.Vertices"/> 
            or <see cref="P:Graphviz4Net.Graphs.IGraph.SubGraphs"/> is changed.
            </summary>
        </member>
        <member name="M:Graphviz4Net.Graphs.Graph`4.RemoveVertex(`0)">
            <summary>
            Removes a vertex from this graph. 
            </summary>
            <remarks>
            <para>
            It cannot remove vertex from sub-graphs, for this 
            one has to invoke specific method on sub-graph, if the sub-graph supports it.
            </para>
            <para>
            To remove a vertex from sub-graph one has invoke RemoveVertex on that particular sub-graph. 
            Class <see cref="T:Graphviz4Net.Graphs.Graph`2"/> provides method <see cref="M:Graphviz4Net.Graphs.Graph`2.RemoveVertexWithEdges(`0)"/>, 
            which is capable of removing a vertex from a sub-graph and which also removes all edges that contain the vertex.
            </para>
            </remarks>
            <param name="vertex">Vertex to be removed.</param>
        </member>
        <member name="P:Graphviz4Net.Graphs.Graph`4.Edges">
            <summary>
            This collection is not specialized, because edges might connect either nodes or sub-graphs, 
            therefore we cannot choose between <c>TVerticesEdge</c> or <c>TSubgraphsEdge</c>. 
            If you want 'type safe' access use <see cref="P:Graphviz4Net.Graphs.Graph`4.VerticesEdges"/> or <see cref="P:Graphviz4Net.Graphs.Graph`4.SubGraphsEdges"/>.
            </summary>
        </member>
        <member name="P:Graphviz4Net.Graphs.Graph`4.Ratio">
            <summary>
            Gets the height/width ratio that should be fulfilled when generating the layout.
            </summary>
        </member>
        <member name="P:Graphviz4Net.Graphs.Graph`4.AllVertices">
            <summary>
            Gets the vertices on the top level and all the vertices from subgraphs.
            </summary>
        </member>
        <member name="M:Graphviz4Net.Graphs.Graph`2.RemoveVertexWithEdges(`0)">
            <summary>
            Removes given vertex and all related edges.
            </summary>
            <remarks>Edges with <paramref name="vertex"/> as <see cref="P:Graphviz4Net.Graphs.IEdge.Source"/> or <see cref="P:Graphviz4Net.Graphs.IEdge.Destination"/>
            will be removed as well. 
            This operation performs several searches in list of vertices, therefore, it may be quiet slow.</remarks>
            <param name="vertex">The vertex to be removed.</param>
        </member>
        <member name="T:Graphviz4Net.ILayoutBuilder`1">
            <summary>
            An interface for a class that builds the actual layout from information 
            provided by the <see cref="T:Graphviz4Net.LayoutDirector"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Graphviz4Net.LayoutDirector"/> object directs the whole process of creating 
            the layout, when it has a piece of information about, e.g., a vertex position 
            and size, it passes this piece of information to the builder, so the builder can 
            create an actual vertex in the WPF Canvas, Windows Form, HTML/CSS files, ...
            </para>
            <para>
            The director gets an <c>original <see cref="T:Graphviz4Net.Graphs.IGraph"/></c> from the user, 
            then it uses dot to create a layout for it -- this results into a new 
            instance of the original graph, we will call it <c>dot graph</c>, 
            that contains layout information. Most of the builder methods has an 
            original graph element and then the dot graph element 
            among their parameters.
            </para>
            <para>
            Values generated by dot are passed to <see cref="T:Graphviz4Net.ILayoutBuilder`1"/> as they are. 
            So the conversion must be done by the builder (each build will probably perform 
            different kind of conversion). Dot used 2 axes X and Y. Position [0,0] is in 
            the top, left corner and it increases to the right and to the bottom. 
            Sizes (width, height) should be multiplied by 72 to have the same measure as positions.
            </para>
            </remarks>
        </member>
        <member name="M:Graphviz4Net.ILayoutBuilder`1.Start(Graphviz4Net.Graphs.IGraph)">
            <summary>
            Starts the process of building a layout for the <paramref name="originalGraph"/>. 
            </summary>
            <param name="originalGraph">The original graph that should be laid out.</param>
        </member>
        <member name="M:Graphviz4Net.ILayoutBuilder`1.BuildGraph(System.Double,System.Double,Graphviz4Net.Graphs.IGraph,Graphviz4Net.Dot.DotGraph{`0})">
            <summary>
            Can be used to set up the size of a drawing area.
            </summary>
            <param name="width">The with of the generated layout.</param>
            <param name="height">The height of the generated layout.</param>
            <param name="originalGraph">The original graph to be drawn.</param>
            <param name="dotGraph">The according generated dot graph with the layout information.</param>
        </member>
        <member name="M:Graphviz4Net.ILayoutBuilder`1.BuildVertex(System.Windows.Point,System.Double,System.Double,System.Object,Graphviz4Net.Dot.DotVertex{`0})">
            <summary>
            Builds a vertex provided with it's position and size, but also with the instance of the 
            vertex in the original graph and instance of the vertex in graph generated by dot. 
            (the position and size should be enough for most of layout builders)
            </summary>
            <param name="position">The position of the vertex. 
            Dot uses position coordinates incrementing from the top left corner.</param>
            <param name="width">The width of the vertex. 
            Multiply this value by 72 to get the same measure as for <paramref name="position"/>.</param>
            <param name="height">The height of the vertex. 
            Multiply this value by 72 to get the same measure as for <paramref name="position"/>.</param>
            <param name="originalVertex">The vertex from original graph that is to be drawn.</param>
            <param name="dotVertex">The according vertex with layout information generated by dot.</param>
        </member>
        <member name="M:Graphviz4Net.ILayoutBuilder`1.BuildSubGraph(System.Double,System.Double,System.Double,System.Double,Graphviz4Net.Graphs.ISubGraph,Graphviz4Net.Dot.DotSubGraph{System.Int32})">
            <summary>
            Builds a subgraph area provided with it's positions.
            </summary>
            <param name="originalSubGraph">The subgraph from the original graph that is to be drawn.</param>
            <param name="subGraph">The according subgraph with layout information generated by dot.</param>
        </member>
        <member name="M:Graphviz4Net.ILayoutBuilder`1.BuildEdge(System.Windows.Point[],Graphviz4Net.Graphs.IEdge,Graphviz4Net.Dot.DotEdge{`0})">
            <summary>
            Builds an edge provided with it's path. 
            The path format is basically similar to the one used by WPF.
            See a dot manual for more detailed explanation.
            </summary>
            <remarks>
            Only a path of the edge is provided as a separate parameter, but the 
            <paramref name="edge"/> contains more layout information such as label 
            position, or arrows positions. It depends upon the author of the builder 
            whether he/she wants to support all these scenarios.
            </remarks>
        </member>
        <member name="M:Graphviz4Net.ILayoutBuilder`1.Finish">
            <summary>
            The last method called by <see cref="T:Graphviz4Net.LayoutDirector"/> when everything is done.
            </summary>
        </member>
        <member name="M:Graphviz4Net.ILayoutBuilder`1.GetSize(System.Object)">
            <summary>
            Provides an expected size of given vertex so the dot knows how to layout this vertex. 
            The size is measured as 1/72 of a point used for positions measure. (Just multiply it by 1/72)
            </summary>
            <param name="vertex">The original vertex which should be measured.</param>
            <returns></returns>
        </member>
        <member name="M:Graphviz4Net.ILayoutBuilder`1.GetAdditionalAttributes(System.Object)">
            <summary>
            Provides a way to add more attributes into the input file for dot, 
            so the layouting process can be tweaked.
            </summary>
        </member>
        <member name="P:Graphviz4Net.Graphs.Edge`1.DestinationPort">
            <summary>
            Determines the position within the destination node where the edge will be pointing to.
            </summary>
            <remarks>Ports are not supporter in the WPF control yet.</remarks>
        </member>
        <member name="P:Graphviz4Net.Graphs.Edge`1.SourcePort">
            <summary>
            Determines the position within the source node where the edge will be pointing to.
            </summary>
            <remarks>Ports are not supporter in the WPF control yet.</remarks>
        </member>
        <member name="P:Graphviz4Net.Graphs.Edge`1.SourceArrowLabel">
            <summary>
            Gets or sets the label which will be rendered near the source arrow.
            </summary>
        </member>
        <member name="P:Graphviz4Net.Graphs.Edge`1.DestinationArrowLabel">
            <summary>
            Gets or sets the label which will be rendered near the destination arrow.
            </summary>
        </member>
        <member name="P:Graphviz4Net.Graphs.Edge`1.Label">
            <summary>
            Gets or sets Label for the edge. 
            Label will not be rendered if set to null or empty string.
            </summary>
        </member>
        <member name="P:Graphviz4Net.Graphs.Edge`1.Weight">
            <summary>
            Gets or sets the edge weight.
            Use the weight to tweak the generated graphs.
            More weight the edge has, more shorter it will be. 
            </summary>
        </member>
        <member name="P:Graphviz4Net.Graphs.Edge`1.ArrowLabelDistance">
            <summary>
            Gets or sets the distance between arrow labels and nodes.
            </summary>
        </member>
        <member name="P:Graphviz4Net.Graphs.Edge`1.Minlen">
            <summary>
            Gets or sets the minimal space between the arrows on the boundary of the same node.
            </summary>
        </member>
        <member name="F:Graphviz4Net.Dot.DotEdge`1.parsedPos">
            <summary>
            For checking whether cached value in <see cref="F:Graphviz4Net.Dot.DotEdge`1.data"/>, <see cref="F:Graphviz4Net.Dot.DotEdge`1.destionationArrowPos"/> 
            and <see cref="F:Graphviz4Net.Dot.DotEdge`1.sourceArrowPos"/> are still valid.
            This member holds original string from which <see cref="F:Graphviz4Net.Dot.DotEdge`1.data"/> were parsed.
            </summary>
        </member>
        <member name="T:Graphviz4Net.LayoutDirector">
            <summary>
            Directs the process of building a layout. 
            </summary>
            <remarks>
            <para>
                LayoutDirector delegates all the work to individual components, 
                which are 
                <list type="dot">
                    <item><see cref="T:Graphviz4Net.Dot.IGraphToDotConverter"/></item>
                    <item><see cref="T:Graphviz4Net.IDotRunner"/></item>
                    <item><see cref="T:Graphviz4Net.Dot.IDotParser`1"/></item>
                    <item><see cref="T:Graphviz4Net.ILayoutBuilder`1"/></item>
                </list>
            </para>
            <para>
                The process of building a graph is divided up into three stages: <see cref="M:Graphviz4Net.LayoutDirector.StartBuilder(Graphviz4Net.Graphs.IGraph)"/>, 
                <see cref="M:Graphviz4Net.LayoutDirector.RunDot"/>, <see cref="M:Graphviz4Net.LayoutDirector.BuildGraph"/>. 
                Only the <see cref="M:Graphviz4Net.LayoutDirector.BuildGraph"/> and <see cref="M:Graphviz4Net.LayoutDirector.StartBuilder(Graphviz4Net.Graphs.IGraph)"/> stages invokes the <see cref="T:Graphviz4Net.ILayoutBuilder`1"/>; 
                therefore, if the graph is built from GUI elements (e.g. WPF controls) these has to be 
                run in the dispatcher thread. On contrary, the <see cref="M:Graphviz4Net.LayoutDirector.RunDot"/> phase 
                invokes only the <see cref="M:Graphviz4Net.ILayoutBuilder`1.GetSize(System.Object)"/> method so, if this method 
                can run outsize the dispatcher thread (e.g., one can calculate the size in advance), 
                then the invocation of <see cref="M:Graphviz4Net.LayoutDirector.RunDot"/> (the actual layouting, which might be slow) can 
                be run in parallel.
            </para>
            </remarks>
        </member>
        <member name="M:Graphviz4Net.LayoutDirector.GetLayoutDirector(Graphviz4Net.ILayoutBuilder{System.Int32},Graphviz4Net.Dot.IDotParser{System.Int32},Graphviz4Net.Dot.IGraphToDotConverter,Graphviz4Net.IDotRunner)">
            <summary>
            Factory method: provides convenient way to construct <see cref="T:Graphviz4Net.LayoutDirector"/>. 
            </summary>
            <remarks>
            <para>If an argument value is not provided (i.e., it's null), then
            default implementation of required interface is provided. See the 
            documentation of the constructor of this class for the list of 
            default implementations of these interfaces.</para>
            </remarks>
        </member>
        <member name="M:Graphviz4Net.LayoutDirector.#ctor(Graphviz4Net.ILayoutBuilder{System.Int32},Graphviz4Net.Dot.IDotParser{System.Int32},Graphviz4Net.Dot.IGraphToDotConverter,Graphviz4Net.IDotRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Graphviz4Net.LayoutDirector"/> class.
            </summary>
            <param name="builder">The builder is responsible for building the actual graphical output.</param>
            <param name="parser">The parser pases DOT output, default 
            implementation is <see cref="T:Graphviz4Net.Dot.AntlrParser.AntlrParserAdapter`1"/>. 
            Use factory method <see cref="M:Graphviz4Net.Dot.AntlrParser.AntlrParserAdapter`1.GetParser"/></param>
            <param name="converter">The converter converts the .NET graph into a 
            GraphViz representation. Default implementation is <see cref="T:Graphviz4Net.Dot.GraphToDotConverter"/>.</param>
            <param name="dotRunner">The dot runner runs the DOT utility. 
            Default implementation is <see cref="T:Graphviz4Net.DotExeRunner"/></param>
        </member>
        <member name="M:Graphviz4Net.LayoutDirector.StartBuilder(Graphviz4Net.Graphs.IGraph)">
            <summary>
            Starts the builder. If the builder requires to be run 
            in the dispatcher thread, this method must be run in it.
            </summary>
            <param name="graph">The graph to be layouted.</param>
        </member>
        <member name="M:Graphviz4Net.LayoutDirector.RunDot">
            <summary>
            Runs the dot program and parses it's output.         
            An invocation of <see cref="M:Graphviz4Net.LayoutDirector.StartBuilder(Graphviz4Net.Graphs.IGraph)"/> must precede by a call to this method.
            </summary>
            <remarks>
            This method uses <see cref="T:Graphviz4Net.IDotRunner"/> and <see cref="T:Graphviz4Net.Dot.IDotParser`1"/>, 
            it does not invoke any method on <see cref="T:Graphviz4Net.ILayoutBuilder`1"/>. 
            So in case the <see cref="T:Graphviz4Net.ILayoutBuilder`1"/> requires to run in dispatcher thread, 
            this method does not have to do so, unless the <see cref="T:Graphviz4Net.IDotRunner"/> or 
            <see cref="T:Graphviz4Net.Dot.IDotParser`1"/> require it.
            </remarks>
        </member>
        <member name="M:Graphviz4Net.LayoutDirector.BuildGraph">
            <summary>
            Processes the graph parsed by <see cref="M:Graphviz4Net.LayoutDirector.RunDot"/> and invokes methods on <see cref="!:ILayoutBuilder"/> 
            to build the actual layout. An invocation of <see cref="M:Graphviz4Net.LayoutDirector.RunDot"/> must precede by a call to this method.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:Graphviz4Net.LayoutDirector.InvalidFormatException"/>
        </member>
        <member name="T:Graphviz4Net.Dot.DotVertex`1">
            <summary>
            Represents a vertex in a <see cref="T:Graphviz4Net.Dot.DotGraph`1"/> obtained from an output of the DOT program.
            </summary>
            <remarks>
            <para>
            A vertex can have any general Id type. If you want to use the whole process of layout 
            building implemented in <see cref="T:Graphviz4Net.LayoutDirector"/> then under the hood, the vertices 
            will have <see cref="T:System.Int32"/> ids.
            </para>
            <para>
            If you want to use only parsing abilities of Graphviz4Net, 
            you can use the vertices with e.g. <see cref="T:System.String"/> ids.
            </para>
            </remarks>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="T:Graphviz4Net.Dot.AntlrParser.AntlrParserAdapter`1">
            <summary>
            This adapter provides simple interface to the ANTLR parsing pipeline. 
            </summary>
            <typeparam name="TVertexId"></typeparam>
        </member>
        <member name="M:Graphviz4Net.Dot.AntlrParser.AntlrParserAdapter`1.GetParser">
            <summary>
            Returns an instance of <see cref="T:Graphviz4Net.Dot.AntlrParser.AntlrParserAdapter`1"/> composed with 
            graph builder for given type of node's ids. At the moment only <see cref="T:System.Int32"/> and 
            <see cref="T:System.String"/> ids are supported.
            </summary>
            <remarks>
            <para>
            Use <see cref="T:System.String"/> as <see cref="!:TVertexId"/> if you want arbitrary ids or support for 
            'node:record' syntax when defining edges. Use <see cref="T:System.Int32"/> as <see cref="!:TVertexId"/> if 
            you want better performance, but in such case ids of nodes in your graph must be integral and 
            'node:record' syntax is not supported.
            </para>
            <para>
            To implement custom builder, one must implement <see cref="T:Graphviz4Net.Dot.AntlrParser.IDotGraphBuilder"/> (or 
            abstract class <see cref="T:Graphviz4Net.Dot.AntlrParser.DotGraphBuilder`1"/>) and use the other overload of this method.
            </para>
            </remarks>
        </member>
        <member name="M:Graphviz4Net.Dot.AntlrParser.AntlrParserAdapter`1.GetParser(Graphviz4Net.Dot.AntlrParser.DotGraphBuilder{`0})">
            <summary>
            Returns an instance of <see cref="T:Graphviz4Net.Dot.AntlrParser.AntlrParserAdapter`1"/> composed with 
            given graph builder.
            </summary>
        </member>
        <member name="M:Graphviz4Net.Dot.AntlrParser.AntlrParserAdapter`1.#ctor(Graphviz4Net.Dot.AntlrParser.DotGraphBuilder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Graphviz4Net.Dot.AntlrParser.AntlrParserAdapter`1"/> class.
            This constructor is private, use <see cref="M:Graphviz4Net.Dot.AntlrParser.AntlrParserAdapter`1.GetParser"/> or 
            <see cref="M:Graphviz4Net.Dot.AntlrParser.AntlrParserAdapter`1.GetParser(Graphviz4Net.Dot.AntlrParser.DotGraphBuilder{`0})"/> factory methods instead.
            </summary>
        </member>
        <member name="M:Graphviz4Net.Dot.AntlrParser.AntlrParserAdapter`1.Parse(System.String)">
            <summary>
            Convenient method for parsing strings. 
            For betters performance, when you read graph from a file use, 
            consider using <see cref="M:Graphviz4Net.Dot.AntlrParser.AntlrParserAdapter`1.Parse(System.IO.TextReader)"/> instead.
            </summary>
        </member>
        <member name="T:Graphviz4Net.LayoutBuilder`1">
            <summary>
            Abstract class providers basic implementation of some of the <see cref="T:Graphviz4Net.ILayoutBuilder`1"/> 
            methods. Methods that are necessary to override in order to implement correct builder are abstract.
            </summary>
        </member>
        <member name="M:Graphviz4Net.LayoutBuilder`1.GetSize(System.Object)">
            <summary>
            This method is given a vertex from the original graph and is 
            expected to return its size (or size of a graphical element that will represent it).
            </summary>
            <param name="vertex">The vertex from the original graph. 
            It must be <see cref="T:System.Object"/>, because the original graph might be any general 
            <see cref="T:Graphviz4Net.Graphs.Graph`4"/>.</param>
        </member>
        <member name="M:Graphviz4Net.LayoutBuilder`1.GetAdditionalAttributes(System.Object)">
            <summary>
            This method is given a vertex from the original graph and is expected to return 
            additional GraphViz attributes that will be added to it.
            </summary>
            <param name="vertex">The vertex from the original graph. 
            It must be <see cref="T:System.Object"/>, because the original graph might be any general 
            <see cref="T:Graphviz4Net.Graphs.Graph`4"/>.</param>
        </member>
    </members>
</doc>
